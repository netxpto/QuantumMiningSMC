function onToolsMenuOpening(this, ~, ~)
%ONTOOLSMENUOPENING Respond to the ToolsMenuOpening event from the scope.

%   Copyright 2014 The MathWorks, Inc.

m = this.Menus;

if ~isfield(m, 'ZoomIn') || isempty(m.ZoomIn)
    hmgr     = getGUI(this.Application);
    showAutoscale = getPropertyValue(this, 'ShowAutoscaleAction');
    
    if showAutoscale
        m.PerformAutoscale = hmgr.findwidget('Base/Menus/Tools/PerformAutoscale');
        m.PerformAutoscale.Separator = 'on';
        toolsMenu = get(m.PerformAutoscale, 'Parent');
        position = uiservices.Counter(get(m.PerformAutoscale, 'Position')-1);
        m.ZoomIn = uimenu('Parent', toolsMenu, ...
            'Label',    uiscopes.message('ZoomIn'), ...
            'Position', position.next, ...
            'Callback', @this.toggleZoomIn, ...
            'Tag',      'uimgr.uimenu_ZoomIn');
    else
        m.ZoomIn = hmgr.findwidget('Base/Menus/Tools/ZoomIn');
        toolsMenu = get(m.ZoomIn, 'Parent');
        position = uiservices.Counter(get(m.ZoomIn, 'Position'));
        m.PerformAutoscale = [];
    end
    m.ZoomX = uimenu('Parent', toolsMenu, ...
        'Label',    uiscopes.message('ZoomX'), ...
        'Position', position.next, ...
        'Callback', @this.toggleZoomX, ...
        'Tag',      'uimgr.uimenu_ZoomX');
    m.ZoomY = uimenu('Parent', toolsMenu, ...
        'Label',    uiscopes.message('ZoomY'), ...
        'Position', position.next, ...
        'Callback', @this.toggleZoomY, ...
        'Tag',      'uimgr.uimenu_ZoomY');
    
    m.Pan              = [];
    m.Auto             = [];
    m.Updates          = [];
    m.OnceAtStopMode   = [];
    m.Options          = [];
    if getPropertyValue(this, 'ShowPanningAction')
        m.Pan = uimenu('Parent', toolsMenu, ...
            'Label',    uiscopes.message('PanMenuLabel'), ...
            'Position', position.next, ...
            'Callback', @this.togglePan, ...
            'Tag',      'uimgr.uimenu_Pan');
    end
    
    if showAutoscale
        
        showStreaming = getPropertyValue(this, 'ShowStreamingMenuItems');
        
        if showStreaming
            m.Auto = uimenu('Parent', toolsMenu, ...
                'Separator', 'on', ...
                'Label', uiscopes.message('AutoScaleAxesLimits'), ...
                'Position', position.next, ...
                'Tag',  'uimgr.spctogglemenu_EnableAutoscale', ...
                'Callback', @this.toggleAutoscaleAuto);
            m.Updates = uimenu('Parent', toolsMenu, ...
                'Tag', 'uimgr.spctogglemenu_EnableAfterUpdates', ...
                'Position', position.next, ...
                'Label', uiscopes.message('ScaleAxesLimitsUpdates', this.UpdatesBeforeAutoscale), ...
                'Callback', @this.toggleAutoscaleUpdates);
        
            m.OnceAtStopMode = uimenu('Parent', toolsMenu, ...
                'Separator', 'on', ...
                'Tag',      'uimgr.spctogglemenu_EnableOnceAtStop', ...
                'Label',    uiscopes.message('ScaleAxesLimitsAtStop'), ...
                'Position', position.next, ...
                'Callback', @this.enableOnceAtStopCallback);
            
            % Put the rest of the menu items after Perform Autoscale.
            position.next;
            
            m.Options = uimenu('Parent', toolsMenu, ...
                'Tag',      'uimgr.uimenu_AxesScalingOptions', ...
                'Position', position.next, ...
                'Label',    uiscopes.message('AxesScalingOptions'), ...
                'Callback', @this.editOptionsCallback);
        end
    end
    this.Menus = m;
end

autoMode = getPropertyValue(this, 'AutoscaleMode');

set(m.OnceAtStopMode, 'Checked', uiservices.logicalToOnOff(getPropertyValue(this, 'OnceAtStop')));
set(m.Auto, 'Checked', uiservices.logicalToOnOff(strcmpi(autoMode, 'auto')));
set(m.Updates, 'Checked', uiservices.logicalToOnOff(strcmpi(autoMode, 'updates')));

% Uncheck every zoom/pan mode.
set([m.ZoomIn m.ZoomX m.ZoomY m.Pan], 'Checked', 'off');

% Check any active zoom/pan mode.
if ~strcmpi(this.ZoomMode, 'off')
    set(m.(this.ZoomMode), 'Checked', 'on');
end

% [EOF]
