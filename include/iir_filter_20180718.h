# ifndef IIR_FILTER_H_
# define IIR_FILTER_H_

# include <vector>
# include "netxpto_20180418.h"

using namespace std;

class IIR_Filter : public Block {
/*  It's worth noting that the IIR filter introduces a phase delay in the signal that is hard to compensate.
	This does not really matter if the filter is applied only to noise, but it should not be used carelessly
	when the signal matters
	~*/
	bool firstTime{ true };

public:

	IIR_Filter() {};
	IIR_Filter(vector<Signal *> &InputSig, vector<Signal *> OutputSig) {};

	void initialize(void);
	bool runBlock(void);

//	void setBCoeff(vector<double> bc) { bCoeff.assign(bc); }
//	void setACoeff(vector<double> ac) { aCoeff.assign(ac); }

	int getFilterOrder(void) { return max(bCoeff.size(), aCoeff.size()); }

	vector<double> setBCoeff(vector<double> newBCoeff) { bCoeff = newBCoeff; }
	vector<double> setACoeff(vector<double> newACoeff) { aCoeff = newACoeff; }

private:

	bool firstPass = true;
//	vector<double> bCoeff = { 112.7938e-9, 1.6919e-6, 11.8433e-6, 51.3212e-6, 153.9635e-6, 338.7198e-6, 564.5329e-6, 725.8281e-6, 725.8281e-6, 564.5329e-6, 338.7198e-6, 153.9635e-6, 51.3212e-6, 11.8433e-6, 1.6919e-6, 112.7938e-009 };
//	vector<double> aCoeff = { 1.0000, -6.7883, 22.7691,-49.4219, 77.0506, -90.9140, 83.5424, -60.6945, 35.0632, -16.0744, 5.7903, -1.6071, 332.2882e-3, -48.2630e-3, 4.3990e-3, -189.5169e-6 };

	// Fs 128 GHz, cutoff 17.5 GHz
//	vector<double> bCoeff = {0.000000327393499,0.000004583508981,0.000029792808374,0.000119171233495,0.000327720892111,0.000655441784223,0.000983162676334,0.001123614487239,0.000983162676334,0.000655441784223,0.000327720892111,0.000119171233495,0.000029792808374,0.000004583508981,0.000000327393499};
//	vector<double> aCoeff = { 1.000000000000000,-6.334534256189130,19.809789591161508,-39.946363259171321,57.547679850867169,-62.297744840618591,52.041473256517435, -33.969315766685185, 17.364830001050681, -6.903338115074984, 2.097191877483750, -0.471394499537211, 0.074012590233882, -0.007257389984575, 0.000334975027834};
	
	// Fs 64 GHz, cutoff 17.5 GHz, 14th order
//	vector<double> bCoeff = { 0.000756397215674,0.010589561019438,0.068832146626345,0.275328586505381,0.757153612889797,1.514307225779594, 2.271460838669390, 2.595955244193589,2.271460838669390,1.514307225779594, 0.757153612889797, 0.275328586505381, 0.068832146626345, 0.010589561019438, 0.000756397215674 };
//	vector<double> aCoeff = { 1.000000000000000, 1.309804966464311, 2.656422104130400, 2.313228654414958, 2.316968674474098, 1.394874328232686, 0.856342492001315, 0.355850756270072, 0.139710469043360, 0.038535591272941, 0.009316637569550, 0.001543201481936, 0.000198522007138, 0.000015002979991, 0.000000581262069 };
	
	// Fs 64 GHz, cutoff 17.5 GHz, 16th order
//	vector<double> bCoeff = { 0.000271600337192, 0.004345605395066, 0.032592040462995, 0.152096188827309, 0.494312613688753, 1.186350272853008, 2.174975500230515, 3.107107857472164, 3.495496339656184, 3.107107857472164, 2.174975500230515, 1.186350272853008, 0.494312613688753, 0.152096188827309, 0.032592040462995, 0.004345605395066, 0.000271600337192 };
//	vector<double> aCoeff = { 1.000000000000000, 1.497637969482315, 3.181719881479557, 3.166590339824733, 3.441810416483700, 2.411102243585777, 1.673178721351052, 0.838229214728570, 0.393337479121068, 0.139113788925032, 0.043947726970769, 0.010485560003437, 0.002105316863324, 0.000305399179603, 0.000033337534096, 0.000002228238994, 0.000000074418160 };

	// Fs 64 GHz, cutoff 17.5 GHz, 10th order
//	vector<double> bCoeff = { 0.0059, 0.0586, 0.2636, 0.7030, 1.2303, 1.4764, 1.2303, 0.7030, 0.2636, 0.0586, 0.0059 };
//	vector<double> aCoeff = { 1.0000, 0.9338, 1.7088, 1.0314, 0.8333, 0.3194, 0.1355, 0.0302, 0.0062, 0.0006, 0.0000 };

	// Fs 64 GHz, cutoff 17.5 GHz, 10th order
	vector<double> bCoeff = { 0.0163, 0.1303, 0.4559, 0.9118, 1.1398, 0.9118, 0.4559, 0.1303, 0.0163 };
	vector<double> aCoeff = { 1.0000, 0.7453, 1.2852, 0.5903, 0.4058, 0.1060, 0.0317, 0.0036, 0.0003 };

	vector<double> currState;
	vector<double> oldState;
	int samplesToSkip = 0;
	int count = 0;

};
#endif
